#version 430 core

//See https://www.nvidia.com/content/gtc-2010/pdfs/gtc10_session2020_hp5mc_dyken_ziegler.pdf for more information.
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
layout(r16f , binding = 0) uniform  image2D uValueField;
layout(r32ui, binding = 1) uniform uimage2D uVertCountTex;													  

uniform uint uMaxY;
uniform uint VertCount;
uniform uint uTopXOffset;

uniform float uIsoThreshold;

layout(std430, binding = 1) buffer CountBuffer
{ vec2 Mesh[]; };

uint GetVertCount(uint xCoord, uint texWidth)
{
	ivec2 coords = ivec2(xCoord % texWidth, xCoord / texWidth);
	return uint(imageLoad(uVertCountTex, coords).x);
}

#define BotCenEdge vec2(BotRigCor.x + -((uIsoThreshold - br) / (bl - br)), BotLefCor.y)
#define CenRigEdge vec2(BotRigCor.x, TopRigCor.y + -((uIsoThreshold - tr) / (br - tr)))
#define TopCenEdge vec2(TopRigCor.x + -((uIsoThreshold - tr) / (tl - tr)), TopRigCor.y)
#define CenLefEdge vec2(TopLefCor.x, TopLefCor.y + -((uIsoThreshold - tl) / (bl - tl)))

#define BotLefCor vec2( 0,  0)
#define BotRigCor vec2(+1,  0)
#define TopRigCor vec2(+1, +1)
#define TopLefCor vec2( 0, +1)

#define botLefVal 

void SetVertex(uint index, vec2 pos, int texWidth)
{ Mesh[index] = pos; }

void Triangulate(uint isPos, vec2 pos, int texWidth, vec2 v0, vec2 v1, vec2 v2)
{
	v0 += pos;
	v1 += pos;
	v2 += pos;

	SetVertex(isPos + 0, v0, texWidth);
	SetVertex(isPos + 1, v2, texWidth);
	SetVertex(isPos + 2, v1, texWidth);
}

void Triangulate(uint isPos, vec2 pos, int texWidth, vec2 v0, vec2 v1, vec2 v2, vec2 v3)
{
	v0 += pos;
	v1 += pos;
	v2 += pos;
	v3 += pos;

	SetVertex(isPos + 0, v0, texWidth);
	SetVertex(isPos + 1, v2, texWidth);
	SetVertex(isPos + 2, v1, texWidth);
	SetVertex(isPos + 3, v0, texWidth);
	SetVertex(isPos + 4, v3, texWidth);
	SetVertex(isPos + 5, v2, texWidth);
}
				   
void Triangulate(uint isPos, vec2 pos, int texWidth, vec2 v0, vec2 v1, vec2 v2, vec2 v3, vec2 v4)
{
	v0 += pos;
	v1 += pos;
	v2 += pos;
	v3 += pos;
	v4 += pos;

	SetVertex(isPos + 0, v0, texWidth);
	SetVertex(isPos + 1, v2, texWidth);
	SetVertex(isPos + 2, v1, texWidth);
	SetVertex(isPos + 3, v0, texWidth);
	SetVertex(isPos + 4, v3, texWidth);
	SetVertex(isPos + 5, v2, texWidth);
	SetVertex(isPos + 6, v0, texWidth);
	SetVertex(isPos + 7, v4, texWidth);
	SetVertex(isPos + 8, v3, texWidth);
}

void Triangulate(uint isPos, vec2 pos, int texWidth, vec2 v0, vec2 v1, vec2 v2, vec2 v3, vec2 v4, vec2 v5)
{
	v0 += pos;
	v1 += pos;
	v2 += pos;
	v3 += pos;
	v4 += pos;
	v5 += pos;

	SetVertex(isPos + 0 , v0, texWidth);
	SetVertex(isPos + 1 , v2, texWidth);
	SetVertex(isPos + 2 , v1, texWidth);
	SetVertex(isPos + 3 , v0, texWidth);
	SetVertex(isPos + 4 , v3, texWidth);
	SetVertex(isPos + 5 , v2, texWidth);
	SetVertex(isPos + 6 , v0, texWidth);
	SetVertex(isPos + 7 , v4, texWidth);
	SetVertex(isPos + 8 , v3, texWidth);
	SetVertex(isPos + 9 , v0, texWidth);
	SetVertex(isPos + 10, v5, texWidth);
	SetVertex(isPos + 11, v4, texWidth);
}

void main() 
{
	uint coords = gl_GlobalInvocationID.x;
	if(coords >= VertCount) { return; }
	ivec2 dims = imageSize(uVertCountTex);

	uint texY = uMaxY + 1;
	uint index = 0, left = 0;
	uint key = coords;

	int topXOffset = int(uTopXOffset - 1);
	uint mult = 1;

	while(texY > 0)
	{
		texY--;
	
		index *= 2;
		mult *= 2;
		topXOffset -= int(mult);

		left = GetVertCount(topXOffset + index, dims.x);

		if(key >= left)
		{
			key -= left;
			index++;
			//vertPos += left;
		}
	}

	//Discard all threads that ended up in the middle of a cell's vertices,
	//as the thread at the first vertex generates the whole cell.
	if(key != 0) { return; }
	
	ivec2 fieldDims = imageSize(uValueField);
	ivec2 pos = ivec2(index % fieldDims.x, index / fieldDims.x);
	
	float bl = imageLoad(uValueField, pos + ivec2(vec2( 0,  0))).x;
	float br = imageLoad(uValueField, pos + ivec2(vec2(+1,  0))).x;
	float tr = imageLoad(uValueField, pos + ivec2(vec2(+1, +1))).x;
	float tl = imageLoad(uValueField, pos + ivec2(vec2( 0, +1))).x;
	
	int config = 0;
	if(bl >= uIsoThreshold) { config |= 1; }
	if(br >= uIsoThreshold) { config |= 2; }
	if(tr >= uIsoThreshold) { config |= 4; }
	if(tl >= uIsoThreshold) { config |= 8; }

	switch(config)
	{
	//0 Vertices
	case 0: return;
	
	//3 Vertices
	case 1:  Triangulate(coords, pos, fieldDims.x, BotLefCor    , CenLefEdge, BotCenEdge); return;
	case 2:  Triangulate(coords, pos, fieldDims.x, BotRigCor    , BotCenEdge, CenRigEdge); return;
	case 4:  Triangulate(coords, pos, fieldDims.x, TopRigCor    , CenRigEdge, TopCenEdge); return;
	case 8:  Triangulate(coords, pos, fieldDims.x, TopLefCor    , TopCenEdge, CenLefEdge); return;
												 
	//4 Vertices              		
	case 3:  Triangulate(coords, pos, fieldDims.x, CenLefEdge  , CenRigEdge , BotRigCor , BotLefCor ); return;
	case 6:  Triangulate(coords, pos, fieldDims.x, BotRigCor   , BotCenEdge , TopCenEdge, TopRigCor ); return;
	case 9:  Triangulate(coords, pos, fieldDims.x, BotCenEdge  , BotLefCor  , TopLefCor , TopCenEdge); return;
	case 12: Triangulate(coords, pos, fieldDims.x, TopLefCor   , TopRigCor  , CenRigEdge, CenLefEdge); return;
							 							   		  	   
	case 15: Triangulate(coords, pos, fieldDims.x, BotRigCor   , BotLefCor  , TopLefCor , TopRigCor ); return;
							 								  
	//5 Vertices            						  
	case 7:  Triangulate(coords, pos, fieldDims.x, BotRigCor   , BotLefCor  , CenLefEdge, TopCenEdge, TopRigCor ); return;
	case 11: Triangulate(coords, pos, fieldDims.x, TopLefCor   , TopCenEdge , CenRigEdge, BotRigCor , BotLefCor ); return;
	case 13: Triangulate(coords, pos, fieldDims.x, TopLefCor   , TopRigCor  , CenRigEdge, BotCenEdge, BotLefCor ); return;
	case 14: Triangulate(coords, pos, fieldDims.x, TopLefCor   , TopRigCor  , BotRigCor , BotCenEdge, CenLefEdge); return;
													       					  
	//6 Vertices             				       
	case 5:  Triangulate(coords, pos, fieldDims.x, BotLefCor   , CenLefEdge, TopCenEdge, TopRigCor ,   CenRigEdge, BotCenEdge); return;
	case 10: Triangulate(coords, pos, fieldDims.x, TopLefCor   , TopCenEdge, CenRigEdge, BotRigCor ,   BotCenEdge, CenLefEdge); return;
	}
}